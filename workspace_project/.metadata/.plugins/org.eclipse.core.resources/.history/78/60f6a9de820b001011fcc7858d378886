package com.itwillbs.web;

import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttribute;

import com.itwillbs.domain.MemberVO;
import com.itwillbs.persistence.MemberDAO;
import com.itwillbs.persistence.MemberDAOImpl;
import com.itwillbs.service.MemberService;

@Controller
@RequestMapping("/member/*")
public class MemberController {

	private static final Logger logger = LoggerFactory.getLogger(MemberController.class);
	
	///@Inject
	//private MemberDAO mdao;
	@Inject
	private MemberService mSrv;
	
	@RequestMapping(value = "/join", method = RequestMethod.GET)
	public void memberJoinGET() {
		logger.info("MemberJoinGET Called");
	}
	
	@RequestMapping(value = "/join", method = RequestMethod.POST)
	public String memberJoinPOST(MemberVO vo) {
		logger.info("MemberJoinPOST Called");
		logger.info("vo : " + vo);
		
		//mdao.insertMember(vo);
		
		mSrv.MemberJoin(vo);
		
		return "redirect:/member/login";
	}
	
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String memberLoginGET() {
		return "member/login";
	}
	
	@PostMapping(value = "/login")
	public String memberLoginPOST(MemberVO vo, HttpSession session){
		
		logger.info("Log In - Try");
		logger.info("userinfo : " + vo);
		logger.info("userid : " + vo.getUserid());
		logger.info("useripw : " + vo.getUserpw());
		
		//return "redirect:/member/login";
		
		MemberVO resultVO = mSrv.memberLoginCheck(vo);
		
		if (resultVO == null) {
			logger.info("Login Failed");
			return "redirect:/member/login";
		}
		
		session.setAttribute("id",resultVO.getUserid());
		
		return "redirect:/member/main";
	}
	
	@RequestMapping(value = "/main", method = RequestMethod.GET)
	public String mainGET(HttpSession session,
			@SessionAttribute(name = "id", required = false) String sid) {
		
		//String id = (String) session.getAttribute("id");
		
		logger.info("SID : " + sid);
		
		if (sid == null) {
			return "redirect:/member/login";
		}

		return "member/main";

	}
	
	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public String logoutGET(HttpSession session) {
		
		session.invalidate();
		
		return "redirect:/member/main";
	}
	
// 회원정보 조회 - GET
	@RequestMapping(value = "/info", method = RequestMethod.GET)
	public String memberInfoGET(Model model, @SessionAttribute(name = "id", required = false) String id) {
		
		logger.info(" memberInfoGET() 호출 ");
		
		// 사용자의 세션정보가 있는지 없는지 체크
		if(id == null) {
			logger.info(" 사용자 로그인 정보 없음! ");
			return "redirect:/member/login";
		}
		
		// 서비스 - 회원정보 조회동작 호출
		MemberVO resultVO = mSrv.memberInfo(id);
		logger.info(" result : "+resultVO);
		
		// 전달받은 결과를 뷰페이지로 전달 & 출력
		//=> Model 객체
		model.addAttribute(resultVO);
		
		logger.info(" /member/info.jsp 페이지로 이동 ");
		
		return "/member/info";
	}
	
	@RequestMapping(value = "/update", method = RequestMethod.GET)
	public void memberUpdateGET(HttpSession session, Model model) {
		
		String id = (String) session.getAttribute("id");
		
		MemberVO resultVO = mSrv.memberInfo(id);
		
		model.addAttribute(resultVO);

		return;
		
	}
	
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public String memberUpdatePOST(MemberVO vo) {
		
		int result = mSrv.memberUpdate(vo);
		
		if (result == 0) {
			return "redirect:/member/update";
		}
		
		return "redirect:/member/main";
		
	}
	
	@RequestMapping(value = "/delete", method = RequestMethod.GET)
	public void memberDeleteGET(HttpSession session, Model model) {
		
		String id = (String) session.getAttribute("id");
		
		MemberVO resultVO = mSrv.memberInfo(id);
		
		model.addAttribute(resultVO);

		return;
		
	}
	
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public String memberDeletePOST(MemberVO vo, HttpSession session) {
		
		int result = mSrv.memberDelete(vo);
		
		if (result == 0) {
			return "redirect:/member/delete";
		}
		
		session.invalidate();
		
		return "redirect:/member/main";
		
	}
	
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public String memberListGET(HttpSession session, Model model) {
		
		String id = (String) session.getAttribute("id");
		List<MemberVO> resultVO = mSrv.getMemberList();
		model.addAttribute("memberList", resultVO);
		
		if (!"admin".equals(id)) {
			return "redirect:/member/main";
		}
		
		return "member/list";
		
	}

}
